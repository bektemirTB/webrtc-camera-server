const express = require("express");
const http = require("http");
const { Server } = require("socket.io");

const app = express();
const server = http.createServer(app);
const io = new Server(server, {
  cors: { origin: "*" }
});

app.use(express.static("public"));

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞:
// activeCodes: { "1234": { cameraDeviceId, expiresAt, viewerId: null } }
// pairs: { cameraDeviceId: viewerDeviceId, viewerDeviceId: cameraDeviceId }
// deviceSockets: { deviceId: socketId } - —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
// connections: { socketId: { deviceId, role, pairedWith } }

const activeCodes = {}; // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–¥—ã (5 –º–∏–Ω—É—Ç)
const pairs = {}; // –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –ø–∞—Ä—ã –ø–æ deviceId
const deviceSockets = {}; // –ü—Ä–∏–≤—è–∑–∫–∞ deviceId –∫ socket.id
const connections = {}; // –¢–µ–∫—É—â–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è

const CODE_LIFETIME = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

io.on("connection", (socket) => {
  console.log("üîå –ü–æ–¥–∫–ª—é—á–∏–ª—Å—è:", socket.id);

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º deviceId
  socket.on("register-device", ({ deviceId, role }) => {
    console.log(`üì± –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ${deviceId} (${role})`);
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    if (deviceSockets[deviceId]) {
      const oldSocketId = deviceSockets[deviceId];
      delete connections[oldSocketId];
    }
    
    deviceSockets[deviceId] = socket.id;
    connections[socket.id] = { deviceId, role, pairedWith: null };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞—Ä—É
    const pairedDeviceId = pairs[deviceId];
    if (pairedDeviceId) {
      const pairedSocketId = deviceSockets[pairedDeviceId];
      const partnerOnline = !!pairedSocketId;
      
      connections[socket.id].pairedWith = pairedDeviceId;
      
      socket.emit("pair-exists", {
        pairedWith: pairedDeviceId,
        partnerOnline,
        role
      });
      
      // –ï—Å–ª–∏ –ø–∞—Ä—Ç–Ω–µ—Ä –æ–Ω–ª–∞–π–Ω, —É–≤–µ–¥–æ–º–ª—è–µ–º –µ–≥–æ
      if (partnerOnline) {
        io.to(pairedSocketId).emit("partner-online", deviceId);
        console.log(`‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${deviceId} –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏–ª–æ—Å—å, –ø–∞—Ä—Ç–Ω–µ—Ä ${pairedDeviceId} –æ–Ω–ª–∞–π–Ω`);
      } else {
        console.log(`‚ö†Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${deviceId} –∏–º–µ–µ—Ç –ø–∞—Ä—É —Å ${pairedDeviceId}, –Ω–æ –ø–∞—Ä—Ç–Ω–µ—Ä –æ—Ñ–ª–∞–π–Ω`);
      }
    } else {
      socket.emit("no-pair");
      console.log(`‚ÑπÔ∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${deviceId} –±–µ–∑ –ø–∞—Ä—ã`);
    }
  });

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –¥–ª—è –∫–∞–º–µ—Ä—ã
  socket.on("generate-code", ({ deviceId }) => {
    console.log(`üîë –ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –æ—Ç –∫–∞–º–µ—Ä—ã ${deviceId}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —ç—Ç–æ–π –∫–∞–º–µ—Ä—ã —É–∂–µ –ø–∞—Ä–∞
    if (pairs[deviceId]) {
      socket.emit("error", "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–∞—Ä–∞. –†–∞–∑–æ—Ä–≤–∏—Ç–µ –µ—ë –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π.");
      console.log(`‚ùå ${deviceId} –ø—ã—Ç–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –∫–æ–¥, –Ω–æ —É–∂–µ –≤ –ø–∞—Ä–µ`);
      return;
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
    let code;
    do {
      code = Math.floor(1000 + Math.random() * 9000).toString();
    } while (activeCodes[code]);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –Ω–∞ 5 –º–∏–Ω—É—Ç
    activeCodes[code] = {
      cameraDeviceId: deviceId,
      cameraSocketId: socket.id,
      expiresAt: Date.now() + CODE_LIFETIME,
      viewerId: null
    };

    socket.emit("code-generated", {
      code,
      expiresAt: activeCodes[code].expiresAt
    });

    console.log(`üîë –ö–æ–¥ ${code} —Å–æ–∑–¥–∞–Ω –¥–ª—è –∫–∞–º–µ—Ä—ã ${deviceId}, –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç`);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
    setTimeout(() => {
      if (activeCodes[code] && !activeCodes[code].viewerId) {
        delete activeCodes[code];
        const cameraSocket = deviceSockets[deviceId];
        if (cameraSocket) {
          io.to(cameraSocket).emit("code-expired");
        }
        console.log(`‚è∞ –ö–æ–¥ ${code} –∏—Å—Ç–µ–∫`);
      }
    }, CODE_LIFETIME);
  });

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑—Ä–∏—Ç–µ–ª—è –ø–æ –∫–æ–¥—É
  socket.on("connect-with-code", ({ code, deviceId }) => {
    console.log(`üëÅ –ó—Ä–∏—Ç–µ–ª—å ${deviceId} –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å –∫–æ–¥–æ–º ${code}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
    if (!activeCodes[code]) {
      socket.emit("error", "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∏–ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç–µ–∫");
      console.log(`‚ùå –ö–æ–¥ ${code} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }

    const codeData = activeCodes[code];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –∫–æ–¥
    if (Date.now() > codeData.expiresAt) {
      delete activeCodes[code];
      socket.emit("error", "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ –∏—Å—Ç–µ–∫");
      console.log(`‚ùå –ö–æ–¥ ${code} –∏—Å—Ç–µ–∫`);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –∫–æ–¥ —É–∂–µ
    if (codeData.viewerId) {
      socket.emit("error", "–≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è");
      console.log(`‚ùå –ö–æ–¥ ${code} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è`);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É –∑—Ä–∏—Ç–µ–ª—è —É–∂–µ –ø–∞—Ä—ã
    if (pairs[deviceId]) {
      socket.emit("error", "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–∞—Ä–∞. –†–∞–∑–æ—Ä–≤–∏—Ç–µ –µ—ë –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π.");
      console.log(`‚ùå –ó—Ä–∏—Ç–µ–ª—å ${deviceId} —É–∂–µ –≤ –ø–∞—Ä–µ`);
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –ø–∞—Ä—É –ø–æ deviceId
    const cameraDeviceId = codeData.cameraDeviceId;
    pairs[cameraDeviceId] = deviceId;
    pairs[deviceId] = cameraDeviceId;

    // –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
    codeData.viewerId = deviceId;
    delete activeCodes[code];

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–µ
    if (connections[socket.id]) {
      connections[socket.id].pairedWith = cameraDeviceId;
    }
    
    const cameraSocketId = deviceSockets[cameraDeviceId];
    if (cameraSocketId && connections[cameraSocketId]) {
      connections[cameraSocketId].pairedWith = deviceId;
    }

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–æ–∏—Ö
    socket.emit("paired", {
      pairedWith: cameraDeviceId,
      role: "viewer"
    });

    if (cameraSocketId) {
      io.to(cameraSocketId).emit("paired", {
        pairedWith: deviceId,
        role: "camera"
      });
      
      // –°—Ä–∞–∑—É –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞–ø—É—Å–∫ –∫–∞–º–µ—Ä—ã
      io.to(cameraSocketId).emit("start-camera-request");
    }

    console.log(`‚úÖ –ü–∞—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞: –∫–∞–º–µ—Ä–∞ ${cameraDeviceId} ‚Üî –∑—Ä–∏—Ç–µ–ª—å ${deviceId}`);
    console.log(`üìä –í—Å–µ–≥–æ –ø–∞—Ä: ${Object.keys(pairs).length / 2}`);
  });

  // –†–∞–∑—Ä—ã–≤ –ø–∞—Ä—ã
  socket.on("break-pair", ({ deviceId }) => {
    const pairedDeviceId = pairs[deviceId];
    if (!pairedDeviceId) {
      socket.emit("error", "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–∞—Ä—ã");
      return;
    }

    console.log(`üíî –†–∞–∑—Ä—ã–≤ –ø–∞—Ä—ã: ${deviceId} ‚Üî ${pairedDeviceId}`);

    // –£–¥–∞–ª—è–µ–º –ø–∞—Ä—É
    delete pairs[deviceId];
    delete pairs[pairedDeviceId];

    // –û–±–Ω–æ–≤–ª—è–µ–º connections
    if (connections[socket.id]) {
      connections[socket.id].pairedWith = null;
    }
    
    const pairedSocketId = deviceSockets[pairedDeviceId];
    if (pairedSocketId && connections[pairedSocketId]) {
      connections[pairedSocketId].pairedWith = null;
    }

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–æ–∏—Ö
    socket.emit("pair-broken");
    if (pairedSocketId) {
      io.to(pairedSocketId).emit("pair-broken");
    }

    console.log(`‚úÖ –ü–∞—Ä–∞ —Ä–∞–∑–æ—Ä–≤–∞–Ω–∞`);
    console.log(`üìä –û—Å—Ç–∞–ª–æ—Å—å –ø–∞—Ä: ${Object.keys(pairs).length / 2}`);
  });

  // –ó—Ä–∏—Ç–µ–ª—å —É—à–µ–ª - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—É
  socket.on("viewer-leave", ({ deviceId }) => {
    const pairedDeviceId = pairs[deviceId];
    if (pairedDeviceId) {
      const cameraSocketId = deviceSockets[pairedDeviceId];
      if (cameraSocketId) {
        io.to(cameraSocketId).emit("stop-camera-request");
        console.log(`‚è∏ –ó—Ä–∏—Ç–µ–ª—å ${deviceId} —É—à–µ–ª, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—É ${pairedDeviceId}`);
      }
    }
  });

  // –ó—Ä–∏—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è - –∑–∞–ø—É—Å–∫–∞–µ–º –∫–∞–º–µ—Ä—É
  socket.on("viewer-return", ({ deviceId }) => {
    const pairedDeviceId = pairs[deviceId];
    if (pairedDeviceId) {
      const cameraSocketId = deviceSockets[pairedDeviceId];
      if (cameraSocketId) {
        io.to(cameraSocketId).emit("start-camera-request");
        console.log(`‚ñ∂Ô∏è –ó—Ä–∏—Ç–µ–ª—å ${deviceId} –≤–µ—Ä–Ω—É–ª—Å—è, –∑–∞–ø—É—Å–∫–∞–µ–º –∫–∞–º–µ—Ä—É ${pairedDeviceId}`);
      }
    }
  });

  // WebRTC —Å–∏–≥–Ω–∞–ª–∏–Ω–≥ (—á–µ—Ä–µ–∑ deviceId)
  socket.on("offer", ({ offer, targetDeviceId }) => {
    const senderDeviceId = connections[socket.id]?.deviceId;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø–∞—Ä–∞
    if (pairs[senderDeviceId] !== targetDeviceId) {
      socket.emit("error", "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å offer —Ç–æ–ª—å–∫–æ —Å–≤–æ–µ–π –ø–∞—Ä–µ");
      return;
    }

    const targetSocketId = deviceSockets[targetDeviceId];
    if (targetSocketId) {
      console.log(`üì• Offer –æ—Ç ${senderDeviceId} –¥–ª—è ${targetDeviceId}`);
      io.to(targetSocketId).emit("offer", { offer, fromDeviceId: senderDeviceId });
    }
  });

  socket.on("answer", ({ answer, targetDeviceId }) => {
    const senderDeviceId = connections[socket.id]?.deviceId;
    
    if (pairs[senderDeviceId] !== targetDeviceId) {
      socket.emit("error", "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å answer —Ç–æ–ª—å–∫–æ —Å–≤–æ–µ–π –ø–∞—Ä–µ");
      return;
    }

    const targetSocketId = deviceSockets[targetDeviceId];
    if (targetSocketId) {
      console.log(`üì• Answer –æ—Ç ${senderDeviceId} –¥–ª—è ${targetDeviceId}`);
      io.to(targetSocketId).emit("answer", { answer, fromDeviceId: senderDeviceId });
    }
  });

  socket.on("ice-candidate", ({ candidate, targetDeviceId }) => {
    const senderDeviceId = connections[socket.id]?.deviceId;
    
    if (pairs[senderDeviceId] !== targetDeviceId) {
      return; // –ú–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    }

    const targetSocketId = deviceSockets[targetDeviceId];
    if (targetSocketId) {
      io.to(targetSocketId).emit("ice-candidate", { candidate, fromDeviceId: senderDeviceId });
    }
  });

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
  socket.on("disconnect", () => {
    console.log("‚ùå –û—Ç–∫–ª—é—á–∏–ª—Å—è:", socket.id);
    
    const connection = connections[socket.id];
    if (!connection) return;
    
    const { deviceId } = connection;
    const pairedDeviceId = pairs[deviceId];

    if (pairedDeviceId) {
      const pairedSocketId = deviceSockets[pairedDeviceId];
      if (pairedSocketId) {
        io.to(pairedSocketId).emit("partner-offline", deviceId);
        console.log(`üì¥ ${deviceId} –æ—Ñ–ª–∞–π–Ω, –ø–∞—Ä–∞ —Å ${pairedDeviceId} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞`);
      }
    }

    // –£–¥–∞–ª—è–µ–º –∏–∑ —Ç–µ–∫—É—â–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π, –Ω–æ –ù–ï –∏–∑ pairs
    delete connections[socket.id];
    if (deviceSockets[deviceId] === socket.id) {
      delete deviceSockets[deviceId];
    }

    // –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–¥—ã —ç—Ç–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    Object.keys(activeCodes).forEach(code => {
      if (activeCodes[code].cameraDeviceId === deviceId && !activeCodes[code].viewerId) {
        delete activeCodes[code];
        console.log(`üóë –£–¥–∞–ª–µ–Ω –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ ${code}`);
      }
    });
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—ã
  socket.on("check-pair-status", ({ deviceId }) => {
    const pairedDeviceId = pairs[deviceId];
    if (pairedDeviceId) {
      const pairedSocketId = deviceSockets[pairedDeviceId];
      const partnerOnline = !!pairedSocketId;
      
      socket.emit("pair-status", {
        hasPair: true,
        pairedWith: pairedDeviceId,
        partnerOnline
      });
    } else {
      socket.emit("pair-status", { hasPair: false });
    }
  });
});

// –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
setInterval(() => {
  const now = Date.now();
  Object.keys(activeCodes).forEach(code => {
    if (now > activeCodes[code].expiresAt && !activeCodes[code].viewerId) {
      delete activeCodes[code];
      console.log(`üßπ –û—á–∏—â–µ–Ω –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥ ${code}`);
    }
  });
}, 60000);

const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üìä –°–∏—Å—Ç–µ–º–∞ –ø–∞—Ä–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–∞`);
});